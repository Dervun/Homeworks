#pragma once

/*!
 * \brief Двусвязный список
 */
class LinkedList
{
public:
    /*!
     * \brief Создание двусвязного списка
     */
    LinkedList();
    /*!
     * \brief Деструктор
     * Удаляет все ячейки, которые были в списке.
     */
    ~LinkedList();
    /*!
     * \brief Добавление
     * \param x Значение, которое надо добавить
     * Функция добавляет ячейку с заданным значением в голову списка.
     */
    void add(int x);
    /*!
     * \brief Удаление
     * \param x Значение, ячейку с которым надо удалить
     * \return true, если ячейка была найдена и удалена; false, если ячейка не была найдена
     * Из-за того, что в списке могут храниться несколько ячеек с одним и тем же значением, возникает неоднозначность удаления.
     * Я удаляю ячейку, ближайшую к голове списка
     */
    bool remove(int x);
    /*!
     * \brief Длина списка
     * \return Целое число - длину списка, не считая охранника.
     */
    int length()
    {
        return listLength;
    }
    /*!
     * \brief Получить клона
     * \return Указатель на идентичный список.
     * Функция создаёт такой же список и возвращает указатель на созданную копию.
     */
    LinkedList* getClone();
private:
    /*!
     * \brief Ячейка  двусвязного списка
     */
    class ListNode
    {
    public:
        ListNode* next = nullptr; ///< Указатель на следующий элемент.
        ListNode* previous = nullptr; ///< Указатель на предыдущий элемент.
        int value = 0; ///< Значение, хранящееся в ячейке списка.
    };
    ListNode* first; ///< Указатель на первый элемент списка.
    int listLength = 0; ///< Текущая длина списка.
};
