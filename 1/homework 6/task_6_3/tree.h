#pragma once

struct TreeNode;
struct Tree;

/*!
 * Если быть точным, то создаёт пустое дерево. Корень - NULL.
 * \brief Создаёт дерево
 * \return Указатель на созданное дерево
 */
Tree *createTree();
/*!
 * Если узла с таким значением ещё не существует, добавляет его.
 * \brief Добавляет новый узел
 * \param tree Дерево
 * \param x Значение для добавления
 * \return true - добавлено, false - не добавлено (узел с таким значением уже имеется).
 */
bool addTreeNode(Tree *tree, int x);
/*!
 * Поиск узла в дереве с данным значением
 * \brief Поиск узла
 * \param tree Дерево
 * \param x Искомое значение
 * \return Указатель на указатель на искомую ячейку или NULL, если ячейка не нашлась.
 */
TreeNode **search(Tree *tree, int x);
/*!
 * Удаляет из дерева узел с данным значением.
 * \brief Удаляет узел
 * \param tree Дерево
 * \param x Значение узла, который надо удалить
 * \return true - удалено, false - не удалено, т.к. узла с данным значением не существует.
 */
bool removeTreeNode(Tree *tree, int x);
/*!
 * Чистит память, занимаемую деревом. Само дерево при этом удаляется.
 * \brief Удаляет дерево
 * \param tree Дерево, подлежащее удалению.
 */
void clearTree(Tree *tree);
/*!
 * Печатает дерево в формате (a b c), где а - значение в корне дерева, b и c - могут быть поддеревьями и представляются в таком же виде.
 * Предполагается, что дерево не пустое.
 * \brief Форматная печать дерева.
 * \param tree Дерево для печати
 */
void printTree(Tree *tree);
/*!
 * Она же - печать от меньшего к большему. Функция запускает рекурсивную функцию от корня.
 * \brief Печать дерева и инфиксной форме.
 * \param tree Дерево, печать которого запускается
 */
void printInfix(Tree *tree);
/*!
 * \brief Печать дерева от большего к меньшему
 * \param tree Дерево для печати
 */
void printLargestToSmallest(Tree *tree);
