/*!
 * Реализация хэш-таблицы для строк (String) с использованием деревьев для разрешения коллизий.
 * \brief hash-таблица
 */
#pragma once
#include "myString.h"
#include "tree.h"
#include <cctype>
/*!
 * \brief hash-таблица
 * Данная структура является hash-таблицей, коллизии разрешаются с помощью деревьев
 * Структура содержит в себе указатель на , размер массива
 * \param tree Массив указателей на деревья, в которых содержатся элементы, помещённые в hash-таблицу
 * \param size Размер массива (hash-таблицы)
 * \param loadFactor Сколько в среднем элементов приходится на одну ячейку таблицы
 * \param quantity Количество элементов в таблице
 */
struct Table{
    Tree** tree;
    int size;
    double loadFactor;
    int quantity;
};
/*!
 * Создаёт пустую hash-таблицу размера 103.
 * \brief Создаёт hash-таблицу
 * \return Указатель на созданную таблицу
 */
Table* createTable();
/*!
 * Создаёт пустую hash-таблицу заданного размера
 * \brief Создаёт hash-таблицу
 * \param sizeOfTable Размер создаваемой таблицы
 * \return Указатель на созданную таблицу
 */
Table* createTable(int sizeOfTable);
/*!
 * Принимает строку, генерирует целое значение по первым её 10-ти символам
 * \brief hash-функция
 * \param word Строка (в данном случае - слово)
 * \param module Предел значений функции
 * \return Псевдорандомное число от 0 до module - 1
 */
int hashFunction(char* word, int module);
/*!
 * Рекурсивная функция, запускает себя от потомков, потом обрабатывает вершину
 * \brief Копирование ячеек дерева в новую таблицу
 * \param rootNode Указатель на корень дерева
 * \param t1 Новая таблица
 */
void rewriteTree(TreeNode* rootNode, Table* t1);
/*!
 * Не рекурсивная, запускает рекурсивную функцию от корня дерева
 * \brief Копирование ячеек дерева в новую таблицу
 * \param tree
 * \param t1
 */
void rewriteTree(Tree* tree, Table* t1);
/*!
 * Создаёт новую таблицу размера [размер текущей * 11], копирует все элементы в новую таблицу, удаляет старую,
 * изменяет указатель, теперь указатель указывает на новую таблицу, которая в 11 раз больше
 * \brief Перестраивает таблицу
 * \param t Указатель на таблицу, которую надо перестроить (увеличить)
 */
void rebuildTable(Table* &t);
/*!
 * \brief Добавляет в таблицу слово
 * \param t Таблица
 * \param word Слово
 */
void addToTable(Table* &t, char* word);
/*!
 * Функция нужна для перестройки таблицы. Она добавляет в новую таблицу слово и частоту его употребления в тексте
 * \brief Добавляет в таблицу слово
 * \param t Таблица
 * \param word Слово
 * \param quantity Сколько раз слово встречалось в предыдущей таблице
 */
void addToTable(Table* &t1, char* word, int quantity);
/*!
 * Освобождает всю память, занятую под таблицу и деревья в ней
 * \brief Удаляет таблицу
 * \param t Таблица
 */
void clearTable(Table *t);
/*!
 * \brief Ищет дерево, в которое надо добавлять строку
 * \param t Таблица
 * \param string Строка, которую надо положить в таблицу
 * \return Искомое дерево
 */
Tree* findTree(Table* t, char* buffer);
