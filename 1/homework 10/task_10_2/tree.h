#pragma once
#include <cstdio>

struct TreeNode;
struct Tree;

/*!
 * Если быть точным, то создаёт пустое дерево. Корень - NULL.
 * \brief Создаёт дерево
 * \return Указатель на созданное дерево
 */
Tree *createTree();
/*!
 * \brief Создать дерево с данным символом в корне
 * \param symbol Данный символ
 * \return Указатель на созданное дерево.
 */
Tree* createGivenTree(char symbol);
/*!
 * Чистит память, занимаемую деревом. Само дерево при этом удаляется.
 * \brief Удаляет дерево
 * \param tree Дерево, подлежащее удалению.
 */
void clearTree(Tree *tree);
/*!
 * Печатает дерево на консоль в формате (a b c), где а - значение в корне дерева, b и c - могут быть поддеревьями и представляются в таком же виде.
 * Предполагается, что дерево не пустое.
 * Ещё, т.к. мы знаем, что у узла либо есть оба потомка, либо нет ни одного, если у узла 'a' нет потомков, то печатается null.
 * \brief Форматная печать дерева.
 * \param tree Дерево для печати
 */
void printTree(Tree *tree);
/*!
 * Создаёт новое дерево, в корень пихает символ под номером 7 (звоночек).
 * В левого потомка корня записывает корень первого дерева, в правого потомка - второго дерева.
 * \brief Сливает 2 дерева
 * \param tree1 Первое дерево
 * \param tree2 Второе дерево
 * \return Указатель на новое дерево.
 */
Tree* mergeTrees(Tree* tree1, Tree* tree2);
/*!
 * Печатает дерево в файл в формате (a b c), где а - значение в корне дерева, b и c - могут быть поддеревьями и представляются в таком же виде.
 * Предполагается, что дерево не пустое.
 * Ещё, т.к. мы знаем, что у узла либо есть оба потомка, либо нет ни одного, если у узла 'a' нет потомков, то печатается null.
 * \brief Форматная печать дерева.
 * \param stream Указатель на файл, в который идёт печать.
 * \param tree Дерево для печати
 */
void fprintTree(FILE* stream, Tree *tree);
/*!
 * Налево пойдёшь - 0 найдёшь, направо пойдёшь - 1 найдёшь :).
 * Код - последовательность нулей и единиц от корня до ячейки с символом.
 * \brief Из дерева символов получает их код.
 * \param tree Дерево символов
 * \param code Массив, в который будет сохраняться код символов.
 */
void treeToCode(Tree* tree, char** code);
Tree* fscanfTree(FILE* stream);
void uncode(FILE* stream, Tree* tree);
