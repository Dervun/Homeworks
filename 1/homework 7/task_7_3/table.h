/*!
 * Реализация хэш-таблицы для строк (String) с использованием деревьев для разрешения коллизий.
 * \brief hash-таблица
 */
#pragma once
#include "myString.h"
#include "tree.h"
#include "qsort.h"
#include <cctype>

struct Table;
/*!
 * Создаёт пустую hash-таблицу размера 103.
 * \brief Создаёт hash-таблицу
 * \return Указатель на созданную таблицу
 */
Table* createTable();
/*!
 * \brief Добавляет в таблицу слово
 * \param t Таблица
 * \param word Слово
 */
void addToTable(Table* &t, char* word);
/*!
 * Освобождает всю память, занятую под таблицу и деревья в ней
 * \brief Удаляет таблицу
 * \param t Таблица
 */
void clearTable(Table *t);
/*!
 * \brief Ищет дерево, в которое надо добавлять строку
 * \param t Таблица
 * \param string Строка, которую надо положить в таблицу
 * \return Искомое дерево
 */
Tree* findTree(Table* t, char* buffer);
/*!
 * > По данному тексту (читается из файла, не ограничен по размеру) посчитать число использований каждого слова.
 * > Вывести load factor, среднюю длину цепочки, максимальную длину цепочки и значения, которые в нее попали, общее число добавленных слов, число пустых ячеек таблицы.
 * Делает это всё (в 2 файла).
 * \brief Обработка таблицы
 * \param t Таблица
 */
void processTable(Table* t);
